<?xml version="1.0" encoding="UTF-8"?>
<cherrytree>
  <bookmarks list=""/>
  <node name="Java" unique_id="1" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607315448" ts_lastsave="1607972960">
    <rich_text scale="h3">Things to consider before submit:</rich_text>
    <rich_text>
- Empty Array
- Floating number multiplied or divided
- divide by zero 
- Negative numbers





</rich_text>
    <rich_text scale="h3">Feedback from facebook</rich_text>
    <rich_text>
all positivie
struggle for the 2nd
proactive 
communication 
correct complexity
25% chance

ninja
pirates
zedi

feb 3 hrs

level 6 - 2 design interview
product design
	what required for the product to work
	
system design
bootcamp
Lead the design

Friday 18
Monday 4th january

</rich_text>
    <node name="Random" unique_id="2" prog_lang="java" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607315461" ts_lastsave="1607315470">
      <rich_text>import java.util.Random;

Random rand;
int r = rand.nextInt(arr.size());</rich_text>
    </node>
    <node name="Comparator" unique_id="13" prog_lang="java" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607435817" ts_lastsave="1607435854">
      <rich_text>// https://howtodoinjava.com/java8/comparator-example-lambda/

public class Main {

    public static void main(String[] args) {
        List&lt;Employee&gt; employees = getEmployees();

       Comparator&lt;Employee&gt; comp = Comparator.comparing(e-&gt; e.firstName);
       employees.sort(comp.reversed());

        System.out.println(employees);
    }

    private static List&lt;Employee&gt; getEmployees(){
        List&lt;Employee&gt; employees  = new ArrayList&lt;&gt;();
        employees.add(new Employee(6,"Yash", "Chopra", 25));
        employees.add(new Employee(2,"Aman", "Sharma", 28));
        employees.add(new Employee(3,"Aakash", "Yaadav", 52));
        employees.add(new Employee(5,"David", "Kameron", 19));
        employees.add(new Employee(4,"James", "Hedge", 72));
        employees.add(new Employee(8,"Balaji", "Subbu", 88));
        employees.add(new Employee(7,"Karan", "Johar", 59));
        employees.add(new Employee(1,"Lokesh", "Gupta", 32));
        employees.add(new Employee(9,"Vishu", "Bissi", 33));
        employees.add(new Employee(10,"Lokesh", "Ramachandran", 60));
        return employees;
    }

}

class Employee {
    public Integer id;
    public String firstName;
    public String lastName;
    public Integer age;

    public Employee(Integer id, String firstName, String lastName, Integer age){
        this.id = id;
        this.firstName = firstName;
        this.lastName = lastName;
        this.age = age;
    }

    //Other getter and setter methods

    @Override
    public String toString() {
        return "\n["+this.id+","+this.firstName+","+this.lastName+","+this.age+"]";
    }
}</rich_text>
    </node>
  </node>
  <node name="System Design" unique_id="15" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607730393" ts_lastsave="1607972854">
    <rich_text scale="h1" weight="heavy">Topics</rich_text>
    <rich_text>
- </rich_text>
    <rich_text weight="heavy">Concurrency</rich_text>
    <rich_text>
	- Concurrency
	- threads
	- deadlock
	- starvation
	- parallelize algorithms
	- consistency
	- coherence
- </rich_text>
    <rich_text weight="heavy">Networking</rich_text>
    <rich_text>
   - IPC
   - TCP/IP
   - Throughput
   - Latency
- </rich_text>
    <rich_text weight="heavy">Abstraction</rich_text>
    <rich_text>
   - OS
   - File system
   - database
   - Caching in modern OS
- </rich_text>
    <rich_text weight="heavy">Real-World Performance</rich_text>
    <rich_text>
   - Speed of everything. (e.g SSD, RAM, Network)
- </rich_text>
    <rich_text weight="heavy">Estimation</rich_text>
    <rich_text>
   - Back-of the envelope calculation
-  </rich_text>
    <rich_text weight="heavy">Availability and Reliability</rich_text>
    <rich_text>
   - Fault tolerence
   - Handle Network failures
   - Durability
- BloomFilter
   - BloomFilter Calculator
- Count-min-sketch


</rich_text>
    <rich_text scale="h2">System design considerations:</rich_text>
    <rich_text>
- How would you build your backend storage? How does that scale to Facebook’s size?
- How would you lay out the application server layer? What are the responsibilities of the various services?
- How would you design your mobile API? What are the hard problems in representing the data being sent from server to client?
- How would you structure your mobile client? How do low-end devices and poor network conditions affect your design?
- As you’re designing these systems, run through the list of things we’re looking for and make sure you’re able to answer them all for each piece of each app.

1. Backend storage
2. high level layout
3. responsibilities of the various services
4. design mobile API, figure out bottle necks
5. structure mobile client
6. Low-end devices
7. poor network conditions
8. 



</rich_text>
    <rich_text scale="h1">Systems</rich_text>
    <rich_text>
- Hadoop </rich_text>
    <rich_text link="webs https://static.googleusercontent.com/media/research.google.com/en//archive/mapreduce-osdi04.pdf">Map-Reduce</rich_text>
    <rich_text>
- </rich_text>
    <rich_text link="webs https://www.slideshare.net/dvirsky/introduction-to-redis">Redis</rich_text>
    <rich_text>
- </rich_text>
    <rich_text link="webs https://www.slideshare.net/jboner/scalability-availability-stability-patterns">scalability availability stability patterns</rich_text>
    <rich_text>


</rich_text>
    <rich_text scale="h1">Distributed System Design</rich_text>
    <rich_text>
- Instagram
- Twitter
- TripAdvisor
- Salesforce.com
- StackOverflow
- Youtube
- Twitter
- bit.ly
- paste bin


</rich_text>
    <rich_text scale="h1">Links</rich_text>
    <rich_text>
- </rich_text>
    <rich_text link="webs https://github.com/checkcheckzz/system-design-interview">checkcheckzz</rich_text>
    <rich_text>
- </rich_text>
    <rich_text underline="single" link="webs https://dzone.com/articles/component-load-testing" foreground="#1155cc">Building Blocks of a Scalable Architecture</rich_text>
    <rich_text>


- </rich_text>
    <rich_text underline="single" link="webs https://avinetworks.com/what-is-load-balancing/" foreground="#1155cc">Load Balancing A-Z</rich_text>
    <rich_text>
- </rich_text>
    <rich_text underline="single" link="webs https://medium.com/swlh/an-efficient-framework-to-approach-system-design-problems-cf058f614a84" foreground="#1155cc">An efficient framework to approach system design problems</rich_text>
    <rich_text>


</rich_text>
    <rich_text scale="h2">ACID</rich_text>
    <rich_text>
</rich_text>
    <rich_text weight="heavy">A</rich_text>
    <rich_text>tomic
</rich_text>
    <rich_text weight="heavy">C</rich_text>
    <rich_text>onsistent
</rich_text>
    <rich_text weight="heavy">I</rich_text>
    <rich_text>solated
</rich_text>
    <rich_text weight="heavy">D</rich_text>
    <rich_text>urable

</rich_text>
    <rich_text scale="h2">BASE</rich_text>
    <rich_text>
</rich_text>
    <rich_text weight="heavy">B</rich_text>
    <rich_text>asically </rich_text>
    <rich_text weight="heavy">A</rich_text>
    <rich_text>vailable			A BASE system gives up on consistency to improve the performance of the database. Hence most of the famous NoSQL databases are highly available and scalable than ACID-compliant relational databases.
</rich_text>
    <rich_text weight="heavy">S</rich_text>
    <rich_text>oft state						Soft state indicates that the state of the system may change over time, even without input. This is because of the eventual consistency model. 
</rich_text>
    <rich_text weight="heavy">E</rich_text>
    <rich_text>ventually Consistent		Eventual consistency indicates that the system will become consistent over time.



</rich_text>
    <rich_text family="monospace">│ - 179		─ - 196   	┤ - 180		├ - 195		┼ - 197		└ - 192		┌ - 218		</rich_text>
    <rich_text>

</rich_text>
    <rich_text family="monospace">
                              ┌─ Master-Slave
                              │
              ┌─ Replication ─┼─ Master-Master
              │               │
              │               ├─ Tree replication
              │               │
              │               └─ Buddy replication
Availability ─┤
              │
              └── Fail Over

           ┌─ Circuit Breaker
           │
           ├─ Timeouts
           │
           ├─ Let it crash / Supervisors
           │
Stability ─┼─ Crash early
           │
           ├─ Bulkheads
           │
           ├─ Steady state (clean up resources)
           │
           └─ SEDA Throttling


                                               ┌─ Write-behind
                                               │
                                               ├─ Write-through
                       ┌─ Distributed Caching ─┤                     ┌─ TTL
                       │                       │                     │
                       │                       ├─ Eviction policies ─┼─ FIFO
                       │                       │                     │
                       │                       │                     └─ LIFO
                       │                       │
                       │                       └─ Peer-To-Peer
                       │
                       │
                       │
                       │              ┌─ In-memory storage
                       ├─ Data Grids ─┤
                       │              └─ Durable storage
                       │
                       │                               ┌─ Key Value databases
                       │                               │
                       │                               ├─ Document databases
                       │                     ┌─ NoSQL ─┤
                       │                     │         ├─ Graph databases
                       │                     │         │
                       │                     │         └─ Datastructure databases
                       │                     │
                       ├─ Service of Record ─┤
                       │                     │                      ┌─ Partitioning
                       │                     │         ┌─ Sharding ─┤
                       │                     │         │            └─ Replication
                       │                     │         │
                       │                     └─ RDBMS ─┼─ Denormalization
                       │                               │
                       │                               └─ ORM + Rich domain model antipattern
                       │
                       │
                       │                ┌─ Reverse Proxy
                       ├─ HTTP Caching ─┤
                       │                └─ CDN
                       │
                       │               ┌─ Consistent / Atomic data
                       ├─ CAP theorem ─┤
                       │               └─ Eventually Consistent data
                       │
                       │
                       │               ┌─ Message-Passing Concurrency
                       │               │
                       │               ├─ Software Transactional Memory
             ┌─ State ─┼─ Concurrency ─┤
             │         │               ├─ Dataflow Concurrency
             │         │               │
             │         │               └─ Shared-State Concurrency
             │         │
             │         │
Scalability ─┤         ├─ Partitioning
             │         │
             │         └─ Replication
             │
             │
             │            ┌─ Compute Grids
             │            │
             │            │                                           ┌─ Publish-Subscribe
             │            │                                           │
             │            │                                           ├─ Point-to-Point
             │            │                             ┌─ Messaging ─┤
             │            │                             │             ├─ Store-Forward
             │            │                             │             │
             │            │                             │             └─ Request-Reply
             │            │                             │
             │            │                             │          ┌─ Fire-forget
             │            │                             ├─ Actors ─┤
             │            │                             │          └─ Fire-Receive-Eventually
             │            │                             │
             │            │                             ├─ Enterprise Service Bus
             │            │                             │
             │            ├─ Event-Driven Architecture ─┼─ Domain Events
             │            │                             │
             │            │                             ├─ Event Stream Processing
             │            │                             │
             │            │                             ├─ Event Sourcing
             │            │                             │
             │            │                             └─ Command &amp; Query Responsibility Segregation (CQRS)
             │            │
             │            │
             │            │
             │            │                  ┌─ Round-robin allocation
             │            │                  │
             │            │                  ├─ Random allocation
             │            │                  │
             └─ Behavior ─┼─ Load-balancing ─┼─ Weighted allocation
                          │                  │
                          │                  │
                          │                  │                          ┌─ Work-stealing
                          │                  │                          │
                          │                  └─ Dynamic load balancing ─┼─ Work-donating
                          │                                             │
                          │                                             └─ Queue-depth querying
                          │
                          │                      ┌─ SPMD pattern
                          │                      │
                          │                      ├─ Master / Worker pattern
                          │                      │
                          └─ Parallel Computing ─┼─ Loop Parallelism pattern
                                                 │
                                                 ├─ Fork / Join pattern
                                                 │
                                                 └─ MapReduce pattern


</rich_text>
    <rich_text>
</rich_text>
    <node name="How to do a system design Interview?" unique_id="16" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607733620" ts_lastsave="1607733625">
      <rich_text>1. Use Cases
2. Constraints
3. </rich_text>
    </node>
  </node>
  <node name="Leadership Principle" unique_id="17" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607734074" ts_lastsave="1607734074"/>
  <node name="Algorithm" unique_id="4" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607320894" ts_lastsave="1607936057">
    <node name="Trie" unique_id="6" prog_lang="java" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607320986" ts_lastsave="1607321759">
      <rich_text>public class TrieNode {
	private HashMap&lt;Character, TrieNode&gt; children;
	private String content;
	private boolean isWord;
}

public class Trie {
	private TrieNode root;

	public void insert(String word) {
		TrieNode current = root;

		for (char l: word.toCharArray()) {
			current = current.getChildren().computeIfAbsent(l, c -&gt; new TrieNode());
		}
		current.setEndOfWord(true);
	}
	
	public boolean find(String word) {
		TrieNode current = root;
		for (int i = 0; i &lt; word.length(); i++) {
		    char ch = word.charAt(i);
		    TrieNode node = current.getChildren().get(ch);
		    if (node == null) {
		        return false;
		    }
		    current = node;
		}
		return current.isEndOfWord();
	}

	public void delete(String word) {
		delete(root, word, 0);
	}

	private boolean delete(TrieNode current, String word, int index) {
		if (index == word.length()) {
			if (!current.isEndOfWord()) {
				return false;
			}
			current.setEndOfWord(false);
			return current.getChildren().isEmpty();
		}
		char ch = word.charAt(index);
		TrieNode node = current.getChildren().get(ch);
		if (node == null) {
		    return false;
		}
		boolean shouldDeleteCurrentNode = delete(node, word, index + 1) &amp;&amp; !node.isEndOfWord();

		if (shouldDeleteCurrentNode) {
		    current.getChildren().remove(ch);
		    return current.getChildren().isEmpty();
		}
		return false;
	}
}


// Usage
private Trie createExampleTrie() {
	Trie trie = new Trie();

	trie.insert("Programming");
	trie.insert("is");
	trie.insert("a");
	trie.insert("way");
	trie.insert("of");
	trie.insert("life");

    return trie;
}

</rich_text>
    </node>
    <node name="Union FInd" unique_id="12" prog_lang="java" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607387461" ts_lastsave="1607387462">
      <rich_text>// Java Program for union-find algorithm to detect cycle in a graph
import java.util.*;
import java.lang.*;
import java.io.*;

class Graph
{
	int V, E; // V-&gt; no. of vertices &amp; E-&gt;no.of edges
	Edge edge[]; // /collection of all edges

	class Edge
	{
		int src, dest;
	};

	// Creates a graph with V vertices and E edges
	Graph(int v,int e)
	{
		V = v;
		E = e;
		edge = new Edge[E];
		for (int i=0; i&lt;e; ++i)
			edge[i] = new Edge();
	}

	// A utility function to find the subset of an element i
	int find(int parent[], int i)
	{
		if (parent[i] == -1)
			return i;
		return find(parent, parent[i]);
	}

	// A utility function to do union of two subsets
	void Union(int parent[], int x, int y)
	{
		int xset = find(parent, x);
		int yset = find(parent, y);
		parent[xset] = yset;
	}


	// The main function to check whether a given graph
	// contains cycle or not
	int isCycle( Graph graph)
	{
		// Allocate memory for creating V subsets
		int parent[] = new int[graph.V];

		// Initialize all subsets as single element sets
		for (int i=0; i&lt;graph.V; ++i)
			parent[i]=-1;

		// Iterate through all edges of graph, find subset of both
		// vertices of every edge, if both subsets are same, then
		// there is cycle in graph.
		for (int i = 0; i &lt; graph.E; ++i)
		{
			int x = graph.find(parent, graph.edge[i].src);
			int y = graph.find(parent, graph.edge[i].dest);

			if (x == y)
				return 1;

			graph.Union(parent, x, y);
		}
		return 0;
	}

	// Driver Method
	public static void main (String[] args)
	{
		/* Let us create the following graph 
		0 
		| \ 
		| \ 
		1---2 */
		int V = 3, E = 3;
		Graph graph = new Graph(V, E);

		// add edge 0-1
		graph.edge[0].src = 0;
		graph.edge[0].dest = 1;

		// add edge 1-2
		graph.edge[1].src = 1;
		graph.edge[1].dest = 2;

		// add edge 0-2
		graph.edge[2].src = 0;
		graph.edge[2].dest = 2;

		if (graph.isCycle(graph)==1)
			System.out.println( "graph contains cycle" );
		else
			System.out.println( "graph doesn't contain cycle" );
	}
}
</rich_text>
    </node>
    <node name="Number to Hexadecimal" unique_id="18" prog_lang="java" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607936057" ts_lastsave="1607936075">
      <rich_text>/*
Basic idea: Each time we take a look at the last four digits of
            binary verion of the input, and maps that to a hex char
            shift the input to the right by 4 bits, do it again
            until input becomes 0.

*/

public class Solution {

	char[] map = {'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};

	public String toHex(int num) {
		if(num == 0) return "0";
		String result = "";
		while(num != 0){
			result = map[(num &amp; 15)] + result; 
			num = (num &gt;&gt;&gt; 4);
		}
		return result;
	}
}</rich_text>
    </node>
  </node>
  <node name="To Learn" unique_id="3" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607317457" ts_lastsave="1607971298">
    <rich_text>- Trie Algorithm
- Red black tree
- ArrayList to integer Array
- Different sorting algorithm
- bit shift, xor, &gt;&gt;&gt;
- multi dimensional ArrayList
- computIfAbsent
- compare function
- generics
- Iterator
- TreeMap or TreeSet iterate reverse
- Union Find
- Detecting cycle
- Strings functions
- 
- What is the difference in Senior and mid-level Developers?
</rich_text>
    <rich_text link="webs https://www.youtube.com/watch?v=3Kq1MIfTWCE">https://www.youtube.com/watch?v=3Kq1MIfTWCE</rich_text>
    <rich_text>

greenshot for print screen or image editing
keepnote or cherrytree in linux


Buy this course
</rich_text>
    <rich_text link="webs https://www.udemy.com/course/software-engineer-interview-unleashed/">https://www.udemy.com/course/software-engineer-interview-unleashed/</rich_text>
  </node>
  <node name="Tutorial continue" unique_id="7" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607326229" ts_lastsave="1607523368">
    <node name="Pentesting" unique_id="8" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607326258" ts_lastsave="1607326260">
      <rich_text link="webs https://www.youtube.com/watch?v=3Kq1MIfTWCE">https://www.youtube.com/watch?v=3Kq1MIfTWCE</rich_text>
      <rich_text>

greenshot for print screen or image editing
keepnote or cherrytree in linux
</rich_text>
    </node>
    <node name="Open Banking, PSD2 and GDPR. FinTech" unique_id="9" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607326367" ts_lastsave="1607326385">
      <rich_text link="webs https://www.udemy.com/course/a-course-on-api-and-open-banking-gdpr-by-piyush-singh/">https://www.udemy.com/course/a-course-on-api-and-open-banking-gdpr-by-piyush-singh/</rich_text>
      <rich_text>

</rich_text>
    </node>
    <node name="Java Multithreading, Concurrency &amp; Performance Optimization" unique_id="10" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607326453" ts_lastsave="1607326577">
      <rich_text link="webs https://www.udemy.com/course/java-multithreading-concurrency-performance-optimization/">https://www.udemy.com/course/java-multithreading-concurrency-performance-optimization/</rich_text>
    </node>
    <node name="The Definitive Guide to Web Project Requirements Gathering" unique_id="11" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607326554" ts_lastsave="1607326560">
      <rich_text link="webs https://www.udemy.com/course/how-to-start-a-web-project-the-right-way/">https://www.udemy.com/course/how-to-start-a-web-project-the-right-way/</rich_text>
    </node>
    <node name="React Native" unique_id="14" prog_lang="custom-colors" tags="" readonly="0" custom_icon_id="0" is_bold="0" foreground="" ts_creation="1607523368" ts_lastsave="1607523369">
      <rich_text link="webs https://www.youtube.com/watch?v=0-S5a0eXPoc">https://www.youtube.com/watch?v=0-S5a0eXPoc</rich_text>
    </node>
  </node>
</cherrytree>
